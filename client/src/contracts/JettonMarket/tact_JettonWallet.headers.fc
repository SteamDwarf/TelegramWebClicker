;;
;; Header files for JettonWallet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Transfer$_load
(slice, ((int, int, slice, slice, cell, int, cell))) $Transfer$_load(slice sc_0) inline_ref;

;; $TransferNotification$_store
builder $TransferNotification$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $TransferNotification$_store_cell
cell $TransferNotification$_store_cell((int, int, slice, cell) v) inline;

;; $InternalTransfer$_store
builder $InternalTransfer$_store(builder build_0, (int, int, slice, slice, int, cell) v) inline_ref;

;; $InternalTransfer$_store_cell
cell $InternalTransfer$_store_cell((int, int, slice, slice, int, cell) v) inline;

;; $InternalTransfer$_load
(slice, ((int, int, slice, slice, int, cell))) $InternalTransfer$_load(slice sc_0) inline_ref;

;; $InternalTransfer$_load_bounced
(slice, ((int, int))) $InternalTransfer$_load_bounced(slice sc_0) inline;

;; $Excesses$_store
builder $Excesses$_store(builder build_0, (int) v) inline;

;; $Excesses$_store_cell
cell $Excesses$_store_cell((int) v) inline;

;; $Burn$_load
(slice, ((int, int, slice, cell))) $Burn$_load(slice sc_0) inline;

;; $BurnNotification$_store
builder $BurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $BurnNotification$_store_cell
cell $BurnNotification$_store_cell((int, int, slice, slice) v) inline;

;; $BurnNotification$_load_bounced
(slice, ((int, int))) $BurnNotification$_load_bounced(slice sc_0) inline;

;; $JettonWallet$_store
builder $JettonWallet$_store(builder build_0, (slice, slice, int) v) inline;

;; $JettonWallet$_load
(slice, ((slice, slice, int))) $JettonWallet$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $WalletData$_to_external
(int, slice, slice, cell) $WalletData$_to_external(((int, slice, slice, cell)) v) inline;

;; $JettonWallet$init$_store
builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $JettonWallet$init$_load
(slice, ((slice, slice))) $JettonWallet$init$_load(slice sc_0) inline;

;; $JettonWallet$_contract_init
(slice, slice, int) $JettonWallet$_contract_init(slice $owner, slice $master) impure inline_ref;

;; $JettonWallet$_contract_load
(slice, slice, int) $JettonWallet$_contract_load() impure inline_ref;

;; $JettonWallet$_contract_store
() $JettonWallet$_contract_store((slice, slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $JettonWallet$_init_child
(cell, cell) $JettonWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref;

;; $WalletData$_constructor_balance_owner_jetton_jetton_wallet_code
((int, slice, slice, cell)) $WalletData$_constructor_balance_owner_jetton_jetton_wallet_code(int $balance, slice $owner, slice $jetton, cell $jetton_wallet_code) inline;

;; $JettonWallet$_fun_get_wallet_data
((slice, slice, int), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((slice, slice, int) $self) impure inline_ref;

;; $JettonWallet$_fun_forward
((slice, slice, int), ()) $JettonWallet$_fun_forward((slice, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $JettonWallet$_fun_notify
((slice, slice, int), ()) $JettonWallet$_fun_notify((slice, slice, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_body_mode_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body_mode_code_data(slice $to, int $value, cell $body, int $mode, cell $code, cell $data) inline;

;; $InternalTransfer$_constructor_query_id_amount_from_response_address_forward_ton_amount_forward_payload
((int, int, slice, slice, int, cell)) $InternalTransfer$_constructor_query_id_amount_from_response_address_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $from, slice $response_address, int $forward_ton_amount, cell $forward_payload) inline;

;; $SendParameters$_constructor_to_value_body_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body_mode(slice $to, int $value, cell $body, int $mode) inline;

;; $TransferNotification$_constructor_query_id_amount_sender_forward_payload
((int, int, slice, cell)) $TransferNotification$_constructor_query_id_amount_sender_forward_payload(int $query_id, int $amount, slice $sender, cell $forward_payload) inline;

;; $Excesses$_constructor_query_id
((int)) $Excesses$_constructor_query_id(int $query_id) inline;

;; $BurnNotification$_constructor_query_id_amount_sender_response_destination
((int, int, slice, slice)) $BurnNotification$_constructor_query_id_amount_sender_response_destination(int $query_id, int $amount, slice $sender, slice $response_destination) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
