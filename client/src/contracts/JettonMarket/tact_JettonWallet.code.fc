#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_JettonWallet.headers.fc";
#include "tact_JettonWallet.stdlib.fc";
#include "tact_JettonWallet.storage.fc";

;;
;; Contract JettonWallet functions
;;

(slice, slice, int) $JettonWallet$_contract_init(slice $owner, slice $master) impure inline_ref {
    var (($self'master, $self'owner, $self'balance)) = (null(), null(), null());
    $self'master = $master;
    $self'owner = $owner;
    $self'balance = 0;
    return ($self'master, $self'owner, $self'balance);
}

((slice, slice, int), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((slice, slice, int) $self) impure inline_ref {
    var (($self'master, $self'owner, $self'balance)) = $self;
    var $fresh$ret_7 = $WalletData$_constructor_balance_owner_jetton_jetton_wallet_code($self'balance, $self'owner, $self'master, $StateInit$_get_code($JettonWallet$_init_child(__tact_context_sys, $self'owner, $self'master)));
    return (($self'master, $self'owner, $self'balance), $fresh$ret_7);
}

;;
;; Receivers of a Contract JettonWallet
;;

(((slice, slice, int)), ()) $JettonWallet$_internal_binary_Transfer((slice, slice, int) $self, (int, int, slice, slice, cell, int, cell) $msg) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($msg'query_id, $msg'amount, $msg'reciever, $msg'response_destination, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19756, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    throw_unless(47147, ($self'balance >= $msg'amount));
    var ($walletInit'code, $walletInit'data) = $JettonWallet$_init_child(__tact_context_sys, $msg'reciever, $self'master);
    slice $reciever = $global_contractAddress(($walletInit'code, $walletInit'data));
    $self'balance = $self'balance - $msg'amount;
    $global_send($SendParameters$_constructor_to_value_body_mode_code_data($reciever, 0, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_address_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), 64, $walletInit'code, $walletInit'data));
    return (($self'master, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $JettonWallet$_internal_binary_InternalTransfer((slice, slice, int) $self, (int, int, slice, slice, int, cell) $msg) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($msg'query_id, $msg'amount, $msg'from, $msg'response_address, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    if (( ~ __tact_slice_eq_bits($self'master, __tact_context_get_sender()) )) {
        var ($walletInit'code, $walletInit'data) = $JettonWallet$_init_child(__tact_context_sys, $msg'from, $self'master);
        throw_unless(19756, ( __tact_slice_eq_bits(__tact_context_get_sender(), $global_contractAddress(($walletInit'code, $walletInit'data))) ));
    }
    $self'balance = $self'balance + $msg'amount;
    if (($msg'forward_ton_amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_body_mode($msg'response_address, $msg'forward_ton_amount, $TransferNotification$_store_cell($TransferNotification$_constructor_query_id_amount_sender_forward_payload($msg'query_id, $msg'amount, $msg'from, $msg'forward_payload)), 2));
    } else {
        $global_send($SendParameters$_constructor_to_value_body_mode($msg'response_address, 0, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id)), 64));
    }
    return (($self'master, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $JettonWallet$_internal_binary_Burn((slice, slice, int) $self, (int, int, slice, cell) $msg) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($msg'query_id, $msg'amount, $msg'response_destination, $msg'custom_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(29170, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    throw_unless(36073, ($self'balance >= $msg'amount));
    throw_unless(51724, ($ctx'value > (40000000 + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)))));
    $self'balance = $self'balance - $msg'amount;
    $global_send($SendParameters$_constructor_to_value_body_mode($self'master, 0, $BurnNotification$_store_cell($BurnNotification$_constructor_query_id_amount_sender_response_destination($msg'query_id, $msg'amount, $self'owner, $msg'response_destination)), 64));
    return (($self'master, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $JettonWallet$_receive_binary_bounce_InternalTransfer((slice, slice, int) $self, (int, int) $src) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($src'query_id, $src'amount) = $src;
    $self'balance = $self'balance + $src'amount;
    return (($self'master, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $JettonWallet$_receive_binary_bounce_BurnNotification((slice, slice, int) $self, (int, int) $src) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($src'query_id, $src'amount) = $src;
    $self'balance = $self'balance + $src'amount;
    return (($self'master, $self'owner, $self'balance), ());
}

(((slice, slice, int)), ()) $JettonWallet$_internal_binary_Deploy((slice, slice, int) $self, (int) $deploy) impure inline {
    var ($self'master, $self'owner, $self'balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'master, $self'owner, $self'balance)~$JettonWallet$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'master, $self'owner, $self'balance), ());
}

;;
;; Get methods of a Contract JettonWallet
;;

_ %get_wallet_data() method_id(97026) {
    var self = $JettonWallet$_contract_load();
    var res = self~$JettonWallet$_fun_get_wallet_data();
    return $WalletData$_to_external(res);
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract JettonWallet
;;

((slice, slice, int), int) $JettonWallet$_contract_router_internal((slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for InternalTransfer message
        if (op == 0x178d4519) {
            var msg = in_msg~$InternalTransfer$_load_bounced();
            self~$JettonWallet$_receive_binary_bounce_InternalTransfer(msg);
            return (self, true);
        }
        
        ;; Bounced handler for BurnNotification message
        if (op == 0x7bdd97de) {
            var msg = in_msg~$BurnNotification$_load_bounced();
            self~$JettonWallet$_receive_binary_bounce_BurnNotification(msg);
            return (self, true);
        }
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Transfer message
    if (op == 0xf8a7ea5) {
        var msg = in_msg~$Transfer$_load();
        self~$JettonWallet$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive InternalTransfer message
    if (op == 0x178d4519) {
        var msg = in_msg~$InternalTransfer$_load();
        self~$JettonWallet$_internal_binary_InternalTransfer(msg);
        return (self, true);
    }
    
    ;; Receive Burn message
    if (op == 0x595f07bc) {
        var msg = in_msg~$Burn$_load();
        self~$JettonWallet$_internal_binary_Burn(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$JettonWallet$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $JettonWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$JettonWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $JettonWallet$_contract_store(self);
}
